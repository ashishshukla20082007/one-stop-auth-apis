const asyncHandler = require("express-async-handler");
const User = require('../../models/user/userModel');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { UserRole } = require("../../constants");
const candidateProfile = require('../../models/candidate/candidateModel');
const employerProfile = require('../../models/employer/employerModel');

// Helper functions
const generateToken = (userDetails) => {
    return jwt.sign(
        {
            User: {
                id: userDetails._id,
                email: userDetails.email,
                name: userDetails.name,
            },
        },
        process.env.JWT_SECRET,
        { expiresIn: "30d" }
    );
};

const createCandidateProfile = async (user, userData) => {
    const candidateDetails = await candidateProfile.create({
        user_id: user.id,
        name: userData.name,
        email: userData.email,
        phone: userData.phone,
    });
    
    user.default_profile_id = candidateDetails.id;
    await user.save();
    
    return {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        phone: userData.phone,
        default_profile_id: candidateDetails.id,
    };
};

const createEmployerProfile = async (user, userData) => {
    const employerDetails = await employerProfile.create({
        user_id: user.id,
        companyName: userData.companyName,
        email: userData.email,
        phone: userData.phone,
    });
    
    user.default_profile_id = employerDetails.id;
    await user.save();
    
    return {
        id: user.id,
        companyName: userData.companyName,
        email: user.email,
        role: user.role,
        phone: userData.phone,
        default_profile_id: employerDetails.id,
    };
};

// Controller functions
const registerUser = asyncHandler(async (req, res) => {
    const { name, email, password, role, phone, companyName } = req.body;

    if (!email || !password || !role) {
        res.status(400);
        throw new Error("Please provide name, email and password");
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
        res.status(400);
        throw new Error("User already exists");
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await User.create({
        name,
        email,
        password: hashedPassword,
        role,
    });

    if (!user) {
        res.status(400);
        throw new Error("Invalid user data");
    }

    try {
        let response;
        if (user.role === UserRole.CANDIDATE) {
            response = await createCandidateProfile(user, { name, email, phone });
        } else if (user.role === UserRole.EMPLOYER) {
            response = await createEmployerProfile(user, { email, phone, companyName });
        } else {
            res.status(400);
            throw new Error("Invalid role");
        }
        
        res.status(201).json(response);
    } catch (error) {
        res.status(400);
        console.error(error);
        throw new Error(`${user.role} profile not created`);
    }
});

const loginUser = asyncHandler(async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        res.status(400);
        throw new Error("Please provide email and password");
    }

    const userDetails = await User.findOne({ email });
    if (!userDetails) {
        res.status(400);
        throw new Error("User not found");
    }

    const isPasswordCorrect = await bcrypt.compare(password, userDetails.password);
    if (!isPasswordCorrect) {
        res.status(400);
        throw new Error("Invalid credentials");
    }

    const token = generateToken(userDetails);
    res.status(200).json({ token });
});

const getCurrentUser = asyncHandler(async (req, res) => {
    res.status(200).json(req.user);
});

module.exports = {
    registerUser,
    loginUser,
    getCurrentUser
};